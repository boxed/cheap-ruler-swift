import Foundation
import CoreFoundation
import Darwin

typealias Bearing = Double
typealias Point = (Double, Double)
typealias Distance = Double
typealias Area = Double
typealias BufferPoint = (Double, Double, Double, Double)
typealias BoundingBox = (Double, Double, Double, Double)
typealias Buffer = Double

let Infinity = DBL_MAX

// benchmarking helper
func timeIt(m: () -> ()) -> (Double, Int) {
    let startTime = CFAbsoluteTimeGetCurrent()
    var numberOfRuns = 0
    while true {
        m()
        numberOfRuns += 1
        let elapsed = CFAbsoluteTimeGetCurrent() - startTime
        if elapsed > 0.5 { // we run the func up to 0.5 seconds, assuming here that we want to sample funcs that are pretty fast
            return (Double(numberOfRuns) / elapsed, numberOfRuns)
        }
    }
}

// implementation
enum Factor: Double {
    case kilometers
    case miles
    case nauticalmiles
    case meters = 1000
    case yards
    case feet
    case inches
}

var factors: [Factor: Double] = [
    Factor.kilometers: 1,
    Factor.miles: (1000 / 1609.344),
    Factor.nauticalmiles: 1000 / 1852,
    Factor.meters: 1000,
    Factor.yards: 1000 / 0.9144,
    Factor.feet: 1000 / 0.3048,
    Factor.inches: 1000 / 0.0254,
]

struct PointOnLine {
    var point: Point
    var index: Int
    var t: Double
}

class CheapRuler {
    var kx: Double
    var ky: Double
    
    init(lat: Double, units: Factor) {
        let m = factors[units]!
        
        let cos1 = cos(lat * M_PI / 180)
        let cos2 = 2 * cos1 * cos1 - 1
        let cos3 = 2 * cos1 * cos2 - cos1
        let cos4 = 2 * cos1 * cos3 - cos2
        let cos5 = 2 * cos1 * cos4 - cos3
        
        self.kx = m * (111.41513 * cos1 - 0.09455 * cos3 + 0.00012 * cos5) // longitude correction
        self.ky = m * (111.13209 - 0.56605 * cos2 + 0.0012 * cos4)        // latitude correction
    }
    
    func bearing(a: Point, b: Point) -> Bearing {
        let dx = (b.0 - a.0) * self.kx
        let dy = (b.1 - a.1) * self.ky
        if dx == 0 && dy == 0 {
            return 0
        }
        var bearing = atan2(-dy, dx) * 180 / M_PI + 90
        if bearing > 180 {
            bearing -= 360
        }
        return bearing
    }
    
    func destination(p: Point, dist: Distance, bearing: Bearing) -> Point {
        let a = (90 - bearing) * M_PI / 180
        return (
            p.0 + cos(a) * dist / self.kx,
            p.1 + sin(a) * dist / self.ky
        )
    }
    
    func lineDistance(points: [Point]) -> Distance {
        var total: Distance = 0
        for i in 0..<(points.count-1) {
            total += self.distance(points[i], b: points[i + 1])
        }
        return total
    }
    
    func area(polygon: [[Point]]) -> Area {
        var sum = 0.0
    
        for i in 0..<polygon.count {
            let ring = polygon[i]
        
            var k = ring.count - 1
            for j in 0..<ring.count {
                sum += (ring[j].0 - ring[k].0) * (ring[j].1 + ring[k].1) * (i != 0 ? -1 : 1)
                k = j
            }
        }
    
        return (abs(sum) / 2) * self.kx * self.ky
    }

    
    func along(line: [Point], dist: Double) -> Point {
        var sum = 0.0
        
        if dist <= 0 {
            return line[0]
        }
        
        for i in 0..<(line.count-1) {
            let p0 = line[i]
            let p1 = line[i + 1]
            let d = distance(p0, b: p1)
            sum += d
            if (sum > dist) {
                return interpolate(p0, b: p1, t: (dist - (sum - d)) / d)
            }
        }
        
        return line[line.count - 1]
    }
    
    func distance(a: Point, b: Point) -> Distance {
        let dx = (a.0 - b.0) * self.kx
        let dy = (a.1 - b.1) * self.ky
        return sqrt(dx * dx + dy * dy)
    }
    
    func interpolate(a: Point, b: Point, t: Double) -> Point {
        let dx = b.0 - a.0
        let dy = b.1 - a.1
        return (
            a.0 + dx * t,
            a.1 + dy * t
        )
    }

    func pointOnLine(line: [Point], p: Point) -> PointOnLine {
        var minDist = Infinity
        var minX: Double = Infinity
        var minY: Double = Infinity
        var minI: Int = Int.max
        var minT: Double = Infinity
        
        for i in 0..<(line.count-1) {
            var x = line[i].0
            var y = line[i].1
            var dx = (line[i + 1].0 - x) * self.kx
            var dy = (line[i + 1].1 - y) * self.ky
            var t: Double = Infinity
            
            if dx != 0 || dy != 0 {
            
                t = ((p.0 - x) * self.kx * dx + (p.1 - y) * self.ky * dy) / (dx * dx + dy * dy)
                
                if (t > 1) {
                    x = line[i + 1].0
                    y = line[i + 1].1
                
                } else if (t > 0) {
                    x += (dx / self.kx) * t
                    y += (dy / self.ky) * t
                }
            }
            
            dx = (p.0 - x) * self.kx
            dy = (p.1 - y) * self.ky
            
            let sqDist = dx * dx + dy * dy
            if (sqDist < minDist) {
                minDist = sqDist
                minX = x
                minY = y
                minI = i
                minT = t
            }
        }
        
        return PointOnLine(
            point: (minX, minY),
            index: minI,
            t: minT
        )
    }
    
    func lineSlice(start: Point, stop: Point, line: [Point]) -> [Point] {
        var p1 = self.pointOnLine(line, p: start)
        var p2 = self.pointOnLine(line, p: stop)
        
        if p1.index > p2.index || (p1.index == p2.index && p1.t > p2.t) {
            (p1, p2) = (p2, p1)
        }
        
        var slice: [Point] = [p1.point]
        
        let l = p1.index + 1
        let r = p2.index
        
        if line[l] != slice[0] && l <= r {
            slice.append(line[l])
        }
    
        for i in (l + 1)...r {
            slice.append(line[i])
        }
    
        if line[r] != p2.point {
            slice.append(p2.point)
        }
    
        return slice
    }
    
    func lineSliceAlong(start: Double, stop: Double, line: [Point]) -> [Point] {
        var sum = 0.0
        var slice: [Point] = []
        
        for i in 0..<(line.count-1) {
            let p0 = line[i]
            let p1 = line[i + 1]
            let d = self.distance(p0, b: p1)
            
            sum += d
            
            if (sum > start && slice.count == 0) {
                slice.append(interpolate(p0, b:p1, t:(start - (sum - d)) / d))
            }
            
            if (sum >= stop) {
                slice.append(interpolate(p0, b:p1, t:(stop - (sum - d)) / d))
                return slice
            }
        
            if (sum > start) {
                slice.append(p1)
            }
        }
        
        return slice
    }
    
    func bufferPoint(p: Point, buffer: Buffer) -> BufferPoint {
        let v = buffer / self.ky
        let h = buffer / self.kx
        return (
            p.0 - h,
            p.1 - v,
            p.0 + h,
            p.1 + v
        )
    }
    
    func bufferBBox(bbox: BoundingBox, buffer: Buffer) -> BoundingBox {
        let v = buffer / self.ky
        let h = buffer / self.kx
        return (
            bbox.0 - h,
            bbox.1 - v,
            bbox.2 + h,
            bbox.3 + v
        )
    }
    
    func insideBBox(p: Point, bbox: BoundingBox) -> Bool {
        return (
            p.0 >= bbox.0 &&
            p.0 <= bbox.2 &&
            p.1 >= bbox.1 &&
            p.1 <= bbox.3
        )
    }
}

// test & benchmarking
let lines: [[Point]] =
    [
        [
            (-96.920341, 32.838261),
            (-96.920421, 32.838295),
            (-96.920421, 32.838295),
            (-96.920536, 32.838297),
            (-96.920684, 32.838293),
            (-96.920818, 32.838342)
        ],
        [(-96.920349,32.838306),(-96.920421,32.838295)],[(-96.919874,32.837479),(-96.920097,32.837684),(-96.92018,32.837844),(-96.92029,32.838216),(-96.920341,32.838261)],[(-96.915781,32.834689),(-96.915735,32.834529),(-96.91573,32.834443),(-96.915733,32.834286),(-96.915853,32.8337)],[(-96.915092,32.836889),(-96.915915,32.836977)],[(-96.914617,32.83752),(-96.914507,32.838106),(-96.914319,32.839063)],[(-96.915671,32.833443),(-96.915427,32.833817),(-96.91532,32.833963),(-96.915247,32.834072),(-96.915062,32.834252),(-96.914775,32.834518)],[(-96.9104,32.837119),(-96.910567,32.837069),(-96.9111,32.836941)],[(-96.91441,32.836582),(-96.914225,32.836544),(-96.914158,32.836499),(-96.914107,32.836449),(-96.914075,32.836393),(-96.914059,32.836292),(-96.914091,32.836073),(-96.914649,32.834919),(-96.914837,32.834601),(-96.914858,32.834583),(-96.914912,32.834563),(-96.914968,32.834561),(-96.91503,32.83457),(-96.915081,32.834592),(-96.915116,32.834628),(-96.915134,32.834671),(-96.91514,32.834718),(-96.915124,32.834793),(-96.914931,32.835336),(-96.914888,32.835509),(-96.91481,32.835911)],[(-96.914155,32.836758),(-96.913391,32.836697),(-96.912991,32.836643),(-96.912847,32.836589),(-96.912761,32.836508),(-96.912573,32.836433)],[(-96.917377,32.837281),(-96.917589,32.837317),(-96.918117,32.837339)],[(-96.920815,32.836594),(-96.919732,32.836643),(-96.918975,32.836702),(-96.918077,32.836729),(-96.916661,32.83672),(-96.916358,32.836774)],[(-96.911543,32.836925),(-96.911806,32.837006),(-96.911994,32.837028),(-96.912326,32.837114),(-96.912552,32.837202),(-96.912656,32.83729)],[(-96.914657,32.836659),(-96.914518,32.837522),(-96.914472,32.837673),(-96.914383,32.837772),(-96.914284,32.837858),(-96.914153,32.837905),(-96.914024,32.837912),(-96.913925,32.837885),(-96.913804,32.837828),(-96.913678,32.837729),(-96.913391,32.837479),(-96.913278,32.837328),(-96.913252,32.837238),(-96.913262,32.837148),(-96.913305,32.837078),(-96.91337,32.837024),(-96.91348,32.837004),(-96.914483,32.83688)],[(-96.915915,32.836977),(-96.916183,32.837004),(-96.916425,32.837042),(-96.916862,32.837164)],[(-96.915183,32.840102),(-96.915151,32.839929),(-96.915113,32.839539),(-96.915008,32.838973),(-96.914949,32.83873),(-96.914909,32.838491),(-96.914834,32.838234)],[(-96.914728,32.842674),(-96.914772,32.84257),(-96.914872,32.842277),(-96.914974,32.841939),(-96.915014,32.841646),(-96.915065,32.84138),(-96.915113,32.84099),(-96.915175,32.840321),(-96.915193,32.839827),(-96.915204,32.839345),(-96.91525,32.839045),(-96.915325,32.838759),(-96.915483,32.838464),(-96.915658,32.838236),(-96.915907,32.837943),(-96.91621,32.837709),(-96.91636,32.837612),(-96.916588,32.837481),(-96.916948,32.837324),(-96.91731,32.837188),(-96.918026,32.837098),(-96.918847,32.83706),(-96.919391,32.83704),(-96.919847,32.83701),(-96.920174,32.836961)],[(-96.914603,32.839688),(-96.914335,32.841087),(-96.914099,32.841896),(-96.913823,32.842577),(-96.91377,32.842674)],[(-96.915915,32.836977),(-96.916105,32.837042),(-96.916183,32.837116),(-96.916218,32.837164),(-96.916232,32.83722),(-96.916223,32.837308),(-96.916202,32.837355),(-96.916006,32.837556),(-96.915714,32.837779),(-96.915588,32.83784),(-96.915419,32.837871),(-96.915293,32.837867),(-96.91514,32.837828),(-96.915062,32.837774),(-96.915014,32.837734),(-96.914925,32.837614),(-96.914888,32.837515),(-96.914831,32.837297)],[(-96.917743,32.833443),(-96.917766,32.836553)],[(-96.912399,32.842674),(-96.911487,32.841373),(-96.9104,32.841399)],[(-96.91072,32.84264),(-96.910717,32.842674)],[(-96.911584,32.833443),(-96.911581,32.833684),(-96.911559,32.835271),(-96.911554,32.83642)],[(-96.920403,32.833443),(-96.920397,32.833894)],[(-96.9104,32.833662),(-96.911581,32.833684)],[(-96.914775,32.834518),(-96.914512,32.835038),(-96.914327,32.835437),(-96.914016,32.836136),(-96.913973,32.83621),(-96.913906,32.83628),(-96.913769,32.836359),(-96.913675,32.836384),(-96.913203,32.836445)],[(-96.9104,32.837231),(-96.910695,32.837202),(-96.911025,32.837182),(-96.911355,32.837168),(-96.911948,32.837168),(-96.912391,32.837222),(-96.912656,32.83729),(-96.913072,32.83752)],[(-96.916189,32.83818),(-96.918117,32.837339)],[(-96.918165,32.84179),(-96.917329,32.840988),(-96.91702,32.840704),(-96.916811,32.840587),(-96.916661,32.840519),(-96.916368,32.840454),(-96.916164,32.840438),(-96.915263,32.840458)],[(-96.914137,32.840553),(-96.914316,32.840555)],[(-96.91415,32.840452),(-96.914054,32.841182),(-96.913976,32.841572),(-96.913842,32.842049),(-96.913691,32.842414),(-96.913569,32.842674)],[(-96.914919,32.842674),(-96.91492,32.842671),(-96.9151,32.842171),(-96.915244,32.84152),(-96.915322,32.840979),(-96.915376,32.840569),(-96.915384,32.840454)],[(-96.915474,32.833443),(-96.915379,32.833664),(-96.915314,32.833772),(-96.915261,32.833849),(-96.915081,32.834083),(-96.914775,32.834518)],[(-96.913072,32.83752),(-96.913195,32.837608),(-96.913675,32.838002),(-96.913694,32.838011),(-96.91396,32.838241),(-96.914054,32.838345),(-96.914161,32.838507),(-96.914255,32.838714),(-96.914292,32.83889),(-96.914319,32.839063),(-96.914182,32.840098),(-96.91415,32.840452)],[(-96.917406,32.836557),(-96.91588,32.836517),(-96.915778,32.836501),(-96.915727,32.836481),(-96.91569,32.836458),(-96.915644,32.836422),(-96.915609,32.836382),(-96.915588,32.836348),(-96.915572,32.836305),(-96.915564,32.836235),(-96.915564,32.836154),(-96.915668,32.835469),(-96.915754,32.834827),(-96.915781,32.834689),(-96.915835,32.834556),(-96.916052,32.834074),(-96.916283,32.833443)],[(-96.915384,32.840454),(-96.915408,32.839794),(-96.915411,32.839345),(-96.915459,32.839068),(-96.91554,32.838845),(-96.915636,32.838687),(-96.915765,32.838529),(-96.915945,32.838358),(-96.916189,32.83818)],[(-96.919421,32.837159),(-96.919557,32.837216),(-96.919697,32.837288),(-96.919812,32.8374),(-96.919874,32.837479),(-96.920172,32.838358),(-96.920295,32.838845),(-96.920333,32.839068),(-96.920327,32.839422),(-96.920223,32.839746),(-96.920072,32.840046),(-96.919898,32.840276),(-96.919812,32.840355),(-96.919426,32.84067),(-96.918012,32.84172),(-96.91753,32.84207),(-96.917374,32.842196),(-96.916727,32.842674)],[(-96.916981,32.842674),(-96.917079,32.842602),(-96.917487,32.842291),(-96.918114,32.841826),(-96.919984,32.840454),(-96.920236,32.840233),(-96.920429,32.839965),(-96.920512,32.839816),(-96.92059,32.839557),(-96.920612,32.839271),(-96.920604,32.839181),(-96.920574,32.839043),(-96.920416,32.83857),(-96.920365,32.83839),(-96.920341,32.838261),(-96.9203,32.838119),(-96.920282,32.837943),(-96.920274,32.83775),(-96.920295,32.837603),(-96.920319,32.837536),(-96.920397,32.837407),(-96.920515,32.837288),(-96.920601,32.837227),(-96.920727,32.83717)],[(-96.91441,32.836582),(-96.914188,32.836571),(-96.913203,32.836445)],[(-96.914324,32.840454),(-96.91415,32.840452)],[(-96.921387,32.836595),(-96.920815,32.836594),(-96.917766,32.836553),(-96.917406,32.836557),(-96.915851,32.836621),(-96.915459,32.836621),(-96.915129,32.836607)],[(-96.918117,32.837339),(-96.918324,32.837252),(-96.918586,32.837186),(-96.918844,32.837161),(-96.919421,32.837159),(-96.920727,32.83717),(-96.921387,32.83717)],[(-96.913203,32.836445),(-96.913142,32.836438),(-96.912999,32.836438),(-96.912774,32.836427),(-96.912573,32.836433),(-96.911554,32.83642),(-96.9104,32.836416)],[(-96.915253,32.840564),(-96.915376,32.840569),(-96.915816,32.840562),(-96.916197,32.840567),(-96.916478,32.840598),(-96.916623,32.840641),(-96.916757,32.840702),(-96.916913,32.840794),(-96.917326,32.841157),(-96.917452,32.841272),(-96.917956,32.841761),(-96.918061,32.841867)],[(-96.9145,32.842674),(-96.914547,32.842534),(-96.914708,32.841971),(-96.914802,32.841473),(-96.914858,32.841078),(-96.914882,32.840742),(-96.914907,32.840224),(-96.914915,32.839706),(-96.914885,32.839084),(-96.914826,32.83811),(-96.914831,32.837297)],[(-96.914987,32.836886),(-96.915092,32.836889)],[(-96.914526,32.836763),(-96.914155,32.836758),(-96.9104,32.836758)],[(-96.921387,32.836813),(-96.918825,32.836796),(-96.916358,32.836774),(-96.915003,32.836767)],[(-96.914831,32.837297),(-96.914872,32.836663),(-96.915033,32.835872),(-96.91514,32.83546),(-96.915226,32.835212),(-96.915853,32.8337),(-96.91595,32.833443)],[(-96.915092,32.836889),(-96.916398,32.836891),(-96.919547,32.836963),(-96.921322,32.836952),(-96.921387,32.836952)],[(-96.9104,32.837008),(-96.910671,32.836977),(-96.9111,32.836941),(-96.911543,32.836925),(-96.912637,32.836898),(-96.913501,32.836886),(-96.914528,32.83688)],[(-96.91577,32.833443),(-96.915671,32.833693),(-96.915344,32.834518),(-96.91481,32.835911),(-96.914754,32.836127),(-96.914657,32.836659),(-96.914617,32.83752),(-96.914595,32.838561),(-96.914603,32.839688),(-96.914587,32.840693),(-96.914512,32.841211),(-96.914421,32.841666),(-96.914284,32.842196),(-96.914097,32.842674)],[(-96.914316,32.840555),(-96.915253,32.840564)],[(-96.916862,32.837164),(-96.917377,32.837281)],[(-96.915129,32.836607),(-96.91441,32.836582)],[(-96.915263,32.840458),(-96.914324,32.840454)],[(-96.914528,32.83688),(-96.914987,32.836886)],[(-96.915003,32.836767),(-96.914526,32.836763)]]

var ruler = CheapRuler(lat: 32.8351, units: .kilometers)
var milesRuler = CheapRuler(lat: 32.8351, units: .miles)

// tests
let points = Array(lines.flatten())

func assertErr(expected: Double, actual: Double, maxErr: Double, description: String, i: Int) {
    let err = abs((actual - expected) / expected);
    if err > maxErr {
        print("\(description): \(err) > \(maxErr) for i=\(i). expected: \(expected), actual: \(actual)")
    }
}

// distance
let distance_expected = [0.008378522721530966,0,0.010749717813535195,0.013838610971284946,0.013657697587927904,0.044013281621164545,0.0068391514197623125,0.10416972567189697,0.030891354635076574,0.019413765237647276,0.042635421695250454,0.0069116261879168155,0.5826457085080019,0.0183086806376177,0.009577172911626557,0.017465334500943574,0.06613851306063838,0.3617719377192654,0.07753561751121402,0.1355112298862539,0.06598639029222791,0.10788718733352708,0.637754036319657,0.04744046409407494,0.019071666981656257,0.013911884201543202,0.026453803385838824,0.03993584290435518,0.5008820538480422,0.016568611251168885,0.05180738530903197,0.3119106296673429,0.017798808015935193,0.008016350616268752,0.007324494221885542,0.006909617037766451,0.011333293593181729,0.024542232038179984,0.1385485877997474,0.03949471269975054,0.0028036692229989283,0.005515366276063487,0.005238469974132169,0.005880339789619507,0.005357898801346142,0.0051705154162532425,0.005070109623060704,0.0052577908286051914,0.00847519939173927,0.06303372152921365,0.019657925611790725,0.0453047193450776,0.11235257808731806,0.07172313743043489,0.03786245739823775,0.014737426160375995,0.01207361924244057,0.01944992465839253,0.45876995419784605,0.02021344170822001,0.04940583279333197,0.26541509069849073,0.10136117015958783,0.071051047335519,0.08397850942611258,0.13233952591634118,0.028947596386964588,0.450310288271311,0.02617846959013443,0.01773953006642692,0.03246883345774803,0.023279127631702524,0.013794142444291755,0.1997448417560268,0.09686636371244521,0.017337159580454113,0.013800054342251188,0.013308139694942028,0.01331222080564702,0.012080965868250661,0.009727373321527968,0.012964274265275947,0.016122067768646026,0.03863515912787102,0.019839914076975624,0.010301365066689631,0.010054214744799303,0.008762005427975264,0.008542780137735616,0.010518226790403411,0.09474686301917726,0.1342649575551186,0.02522592703114516,0.023008194493208647,0.04303616022369959,0.36251220899321573,0.019473754396392998,0.0435247538095854,0.06371623663872247,0.02758552742766217,0.026845476675765343,0.029432835806681268,0.4939597997561797,0.012276958817933552,0.03390371747191658,0.03878525490806829,0.03280401819558518,0.02996855089043349,0.04361094495364066,0.07463799480713804,0.054973280670314324,0.05362263439641397,0.033644725573286675,0.03257474948646934,0.035982127999637514,0.03017661243030025,0.04004558186048798,0.03846182853667192,0.017689723726582205,0.025813800737960656,0.03790654917278124,0.0370593711860446,0.06765988226898403,0.07684458549068582,0.05088930944950997,0.04274689073720004,0.031042698873467004,0.6025557457581485,0.15761319510469404,0.09264826777038944,0.08001841776554604,0.011871825072563895,0.6646274334338289,0.019172323759265714,0.010994930903498429,0.006261363451393286,0.0063648042581234765,0.009824297643237445,0.005584056437412893,0.028902860335050032,0.03687758065157599,0.013590391879516907,0.016166117999544854,0.011783888353457304,0.01494235041421174,0.009445375968215057,0.0063181221302946585,0.015727070675584043,0.011541912177440838,0.024826353234049702,0.5077727699239807,0.345931459929503,0.845643164225681,0.16794289804370816,0.10162406414747382,0.14123839370037056,0.003792191683109981,1.0299547040985766,0.026807856101721112,0.17653371969231604,0.12780393266727974,0.8908493894032292,0.050167788929281254,0.934681359703447,0.1104041562314812,0.31259370205263126,0.0628456692864568,0.04762969719445259,0.0830049159968845,0.009159661389404805,0.00999158842980844,0.015528991567811174,0.009214628598242817,0.04463082981364766,0.2761646624698818,0.02775785294501277,0.030920921663565613,0.030880088364676584,0.055419986988230405,0.04183485638402746,0.025895306703786276,0.046540107091908624,0.3004110613744119,0.20301909742424815,0.4951043096230534,0.11858115408807052,0.04279910991149764,0.023470200843156975,0.01592837521137288,0.028320290449247595,0.01914740566847937,0.08423100623656576,0.10575781800339629,0.01672963983799919,0.01928515125899576,0.08169190304672652,0.043987800607954874,0.05451441132981851,0.042981341551963856,0.03108595354460972,0.12615909276179177,0.0003465282173637971,0.05810313028294901,0.07365046853595525,0.060615225341305666,0.04588259821425726,0.012813260692314313,0.7798777201137593,0.026136127976088414,0.01346152971675004,0.009893951634252593,0.030991193644600953,0.05620493774258541,0.36990387449259654,0.015097946393717249,0.06271302769749793,0.0020384128886201,0.03567165517083372,0.014525490144668496,0.020607956055678802,0.0246435390331219,0.019879489642093223,0.019407494266871623,0.11583263922549474,0.03948876108912776,0.5294244867375493,0.1426857432967834,0.009697385429695126,0.0052599284903173905,0.00430141196125398,0.00587503992742863,0.005522219552694836,0.0042607480963535544,0.005011184230011202,0.007821903345226906,0.009009616491770123,0.07680989084065051,0.07186045769829646,0.01555575114571951,0.015630740713881576,0.05732051655681146,0.07343146368625852,0.7843452939662691,0.07344594465684656,0.0499429820593018,0.031135505320641476,0.025933641798745768,0.01973190434263985,0.021311914846065035,0.025391967733273624,0.03019906730559754,0.3226950750643045,0.014203685630096484,0.015340370369976545,0.016453107333170784,0.010525597809363563,0.10166018086042491,0.05537516038147018,0.025057187459666765,0.03937935331770495,0.0373260641402184,0.036230142475073224,0.0303133933027351,0.011908305308747452,0.050288000458193455,0.17635692976160655,0.05953594686309811,0.020222535641001925,0.0805146256571518,0.02373659967645878,0.012165928750908704,0.0514820122407643,0.07815653280919697,0.23201058369437041,0.0340423547943379,0.03484151181059308,0.018298598649656068,0.029716445173173824,0.03187810305202435,0.010038564502119846,0.015603661528300023,0.0546445315444071,0.0205808711039938,0.014522895203654958,0.016252765900716146,0.019648594042289334,0.021480373184972493,0.016468148859886997,0.007782615606278065,0.016094168571066846,0.017228336077233376,0.01051829618341627,0.013373893984522116,0.5939814038121429,0.020783632669147317,0.09311654260907076,0.45806162186901805,0.0162624337771659,0.8009278300362112,0.05345785152641949,0.2849887196254366,0.033647685486223135,0.14550079382917516,0.03663536045894266,0.03088028299997588,0.29087772423039293,0.021630884822714493,0.02556252999484156,0.024271715891829745,0.05392513908839965,0.12206094837643988,0.06168160301572301,0.7690944309219782,0.005753846170923199,0.01336445751002951,0.02106355972240177,0.01879685972329176,0.0952444313427708,0.10785117954644628,0.6469708160164086,0.011508214196305676,0.04112686678910598,0.035610088844009874,0.026485811067702324,0.014370051474837841,0.014242735913957073,0.017811674662530638,0.05585618250055378,0.01738598064185313,0.07195021868945746,0.015339399943488053,0.34467463670324133,0.016179746130454448,0.06440448684565248,0.05608468433498269,0.04424636779988501,0.037440464051362185,0.057664402696718915,0.05762190400375552,0.06924174005124464,0.10847808154508215,0.0904310617110173,0.047983949715355446,0.00981868540593552,0.05472198889846298,0.034677157404038546,0.3509325669208246,1.0268344467822377,0.23944522020834375,0.23057234097441315,0.12663716357349866,0.06110408862755362,0.0706237379606926,0.08926016309905949,0.04690508445469457,0.028732090191940274,0.17809611583512072,0.029989165393382068,0.391596040835184,0.12205539606742612,0.2944057635630718,0.16589103850643355,0.006074718243210164,1.0268328659759096,0.02556053511771133,0.04029260310233885,0.041439782865155726,0.10228632526932319,0.08075810970675555,0.09598294305539697,0.39953051109714005,0.029306409486832354,0.09671994873655325,0.1627823795415789,0.02458907783680164,0.05986464703306779,0.09584181947018752,0.11580850896272278,0.12535825153862024,0.11179598232834778,0.058041800368261356,0.05131909973307807,0.0603260376812227,0.05596616469177014,0.23658290631261256,0.08757156343986093,0.40697930337242394,0.04985868432498091,0.22306704592992127,0.06725351272770712,0.4384349898078352,0.08775397845174246,0.3979923162137123,0.04290208100438889,0.013320545764006694,0.044581400276212345]

for i in 0..<(points.count - 1) {
    let expected = distance_expected[i]
    let actual = ruler.distance(points[i], b: points[i + 1])
    assertErr(expected, actual: actual, maxErr: 0.003, description: "distance", i: i)
}

// distance in miles
let d = ruler.distance((30.5, 32.8351), b: (30.51, 32.8451))
let d2 = milesRuler.distance((30.5, 32.8351), b: (30.51, 32.8451))
    
assertErr(d / d2, actual: 1.609344, maxErr: 1e-12, description: "distance in miles", i: 0)

// bearing
let bearing_expected = [-63.168358499156525,0,-88.81417863199124,-91.84236975959682,-66.4804397776352,95.21979003879285,-100.30570881092109,150.61043051857857,-42.42680621413667,-23.550372000573976,-13.952505152879572,-43.59833577684526,132.99198010184847,166.41929543518998,177.20325519324226,-179.08016175949166,-170.2370338024474,11.337660289272069,-82.74731094319029,63.53130497081162,8.962738746772079,9.37241746920313,-168.57228731223967,28.73076075405366,31.624597758763326,29.36786429209857,40.813300854422266,42.1946257366957,54.7169930372886,-109.61289479832882,-105.9508130297151,-97.35442495838335,103.73738360872169,128.6375329107378,139.40255086492127,154.35307612449398,172.41822883056525,-173.00067170261377,-157.88885299734986,-153.5843194614746,-135.57055815771457,-113.78745742209202,-92.43386994136272,-80.19821514884795,-62.82436796798226,-39.24535094861514,-19.378190588293595,-6.122391240486928,10.16238185779092,16.628046997768603,11.796298618679382,9.259418658966705,33.01398807351879,95.42809952638044,99.12772054024745,114.05171960369522,138.26425923288858,115.39825807606725,-78.13409883486399,-78.57409383522955,-87.1608521998273,-108.19195718992367,86.91738524336452,84.70017282115019,87.95033104208613,90.43302815253836,78.02446742625982,87.86117672643189,-69.86932102820376,-82.07107484899849,-72.8655307861755,-65.13553755141521,-44.7981708695929,-110.57110545811186,7.706991461697684,14.357081967635963,37.06518971504373,44.04525332938273,66.87692305523358,86.30473553343819,107.98313957933998,119.27773275661788,133.08034138732987,136.03334418261207,147.8395808939113,166.35653590671714,-174.66648288115692,-152.70026364821263,-134.67606485534643,-102.21019447885837,-98.37013738569259,-85.39045487355833,-83.16251407288334,-79.41426027160959,-71.61992023883627,25.647805187311675,171.1662911122707,175.31992211154693,171.14075667690167,168.4699111035812,171.99557069131671,166.22310505773353,1.1490813989122273,-160.4320410387924,-163.99994946634428,-165.77289001767542,-173.45680596800386,-170.84905103991312,-174.09621979055856,-175.54766503661992,-178.24648292813612,-178.9015131718509,-172.65900563912462,-167.5744291592953,-155.7719187979583,-147.18225435460818,-144.47188257911304,-132.58756099972285,-127.58358615210913,-124.36541206463681,-117.43139970286094,-114.09107335076804,-98.50829769899121,-93.15284638632924,-92.50530269541622,-94.47703726891226,-100.11192008554171,59.77360017974819,9.143285027780262,13.77132015480269,18.804056386135507,24.65786911308088,-162.44500486120558,-67.84560294942295,-41.52913748098395,-31.493999863996763,-11.862722004156868,4.911415385207834,20.576859308160813,39.328103571820634,47.731045069650285,60.04949187595387,77.6845353441491,92.1637728779789,106.87667403935711,129.48750446242522,134.76457530705628,148.07063441512034,162.56674425715815,167.60958213096342,-147.58932438109017,-0.3560229039908105,36.377431696680866,149.50345988783283,88.36898545916792,-12.223747274643541,4.239696778394533,-175.4876519466172,0.5992644178258197,0.6673420119705482,0.20949071130099972,-111.81827272747626,0.6404507023306292,91.5793518292065,-88.72964175221959,-72.73595760641244,23.023787326465758,21.284935273114474,20.497437869075558,26.023401004269186,38.80671567232787,55.53828086401786,72.43572115612405,81.25555219912327,71.54335789800336,-96.67318521315028,-94.12560298544153,-92.89044170566763,-89.99983922215846,-81.7451500515321,-73.01710953553376,-56.65379972059106,-75.85450215089512,-117.43602194308063,-0.5191133757264856,138.78810984877518,137.5682425746788,123.67524095771084,118.34970555203206,104.79079948892173,95.33306354879424,88.48636023444747,84.26539611740044,-89.23804769497431,126.44610739090022,6.304981288824429,9.538566926163998,13.280042951632824,19.166182380726028,21.51585631114597,-89.9996339244023,-164.35486777447994,-163.1715107556702,-169.47198029178583,-173.0931353906555,-173.68544129434264,-176.65500600808483,-179.38201633300537,19.859344499549415,26.825916744943097,30.042999793582226,32.87625705865586,30.585844995133318,25.48436330548106,-49.58528537315648,-45.66818093615927,-60.586961024854496,-44.17809723517507,-37.2135740642336,-29.02801030830766,-20.883863911308925,-10.016986247912778,-7.470516078862878,6.345968960148907,4.34320933123148,-144.9163810436088,91.7864594482791,100.57490882823174,115.01987711640018,126.49515677620997,132.966745035407,143.6768700122894,152.57244080298454,162.6386056371201,174.514957150436,180,-172.73016111884996,-173.57809345551522,-170.66439195451878,-161.1629250483923,-159.27915118031842,-162.90191363911163,6.149002598388654,-178.2500225299691,-179.67835798380744,-171.71629870266574,-163.02862431750938,-152.95560774367897,-145.55034083174812,-138.5096300766174,-130.9661041794466,-110.60445245946966,-63.488932752077304,-58.529628507022345,-40.784935262998765,-33.40113040557487,-15.899450269674261,-11.98079922160087,-8.147813630969711,0.8158694624984411,15.093060661548853,22.923229163325363,32.44078804116013,42.44701224126366,45.83427921267664,48.528375495078414,49.163719675217294,46.128985873372955,48.673227507999385,-89.99993112361511,-131.16855313994876,-132.21634274731403,-131.4350519146657,-131.1287697990316,-136.22759996904776,-148.82348281361985,-154.9192138530867,-165.80042858228467,-176.30209430353858,175.72884636973504,169.64893781149905,164.32272447851255,166.6095398893929,171.11558508661616,166.3637807550949,175.08861951595486,178.00534677470006,-173.15552477625073,-163.2497127428419,-153.06780391136738,-140.2005052574728,-130.17077601985082,-118.29848203381596,96.31992932299448,93.37488183764101,98.65620852739153,-13.220894289645209,90.78374679176733,-122.38574263089491,90.11906042024525,90.91606631492044,89.24226505681405,87.1952301524781,89.99989371956248,92.89042347378168,-73.7442223661134,-116.5749747098209,-106.68941539794253,-96.5786003424879,-90.23620894320433,-89.42530845671874,-89.99982105641458,96.0164612642601,97.77709140355806,89.99996123049279,93.32997836006317,87.96524189628325,90.86961377588838,90.23605053342786,-44.507638815015056,-87.22999594365552,-91.08466222064868,-89.10502963141018,-82.51948924593732,-70.55890852059743,-61.55042515421009,-54.93400664520933,-43.708432529297596,-42.63081903510838,-40.89066031737039,-39.768718845646205,74.90365235952855,-164.24862093846133,-166.4900911667301,-170.98867168255882,-173.2072838170113,-176.56563073555716,-177.67795564554825,-179.25657611558916,177.6794175196906,177.08641995231696,-179.7039343413944,-162.31174704216053,-88.05239082888943,104.83933395017499,90.91884342556446,89.99898193057349,-89.65566421438594,90.45177683075705,90.6074206920093,90.35190900335924,15.25222948630731,-176.8898360115017,-170.29517886199278,-167.6901473062663,-163.7553909375346,-160.7898000462187,-162.40423641399113,11.815918282043793,-89.89521786020993,-88.44037032878992,-90.42210719551586,-89.99998237874593,89.64945709817326,-97.75278349052702,-95.7033459340717,-92.46126755841848,-91.68219351310293,-90.94678497048473,-90.39810804835399,-163.10988605635674,18.404250368996713,18.41984455338911,17.853582297431547,12.289104435180683,8.709879039137686,2.235361458620355,1.0172614149810169,-0.3417131293573436,0.766344154322848,6.935793520625259,9.538556914147389,12.252956858473992,18.194809085044522,-175.03725779127225,-89.34475877575512,-158.31621119961858,-74.8695322495171,109.63776192527477,92.36950183161946,-10.475734036813332,90.2902405855761,-177.254272156639,-89.10855416706457,-173.55458838862484,90.5716881361661]

for i in 0..<(points.count - 1) {
    var expected = bearing_expected[i]
    var actual = ruler.bearing(points[i], b: points[i + 1])
    assertErr(expected, actual: actual, maxErr: 0.005, description: "bearing", i: i)
}

// destination
var destination_expected = [[-96.920341,32.829270606227354], [-96.92060772614724,32.82930597536924], [-96.92079439543318,32.82931008237797], [-96.92109595102637,32.829318926002884], [-96.92143033606274,32.82932450415997], [-96.92175049436655,32.82938581393253], [-96.9214673678443,32.82936485157203], [-96.92172490097578,32.82937161249924], [-96.92136302350269,32.82857609130589], [-96.92177070843934,32.828804281755275], [-96.92203788361117,32.82899017678576], [-96.92233149855905,32.829390768511665], [-96.9225654851768,32.82946704822662], [-96.91818769656204,32.82592900640833], [-96.91832325986564,32.825805632710264], [-96.91849903664682,32.82575891598141], [-96.91868196749337,32.82564384425943], [-96.91898098457526,32.82510240477685], [-96.91839818728636,32.82833858395729], [-96.91939827432712,32.828476367444324], [-96.91827631973166,32.82907174007224], [-96.91834125479303,32.82971268589303], [-96.91832704128093,32.83072718817359], [-96.91985130136207,32.82516722942136], [-96.91977856038615,32.825603791320425], [-96.91984148408056,32.825814854834505], [-96.91993702946878,32.82599140014963], [-96.91991915091327,32.826241406696084], [-96.91979779876097,32.826579853154904], [-96.9155870543902,32.82925571745485], [-96.91591658029525,32.829282976817495], [-96.91661047207285,32.829234607705295], [-96.9200796705351,32.828957585869084], [-96.9200521621881,32.829003886341305], [-96.92014087867754,32.829045483451324], [-96.9202437726806,32.82908435082749], [-96.92036379723118,32.829119461406734], [-96.92049790317056,32.829111787443], [-96.92067803914178,32.82898830051573], [-96.92138209750365,32.82793197154348], [-96.9217141663508,32.827713770769876], [-96.92187716351987,32.82779766780548], [-96.92207102285543,32.827881631620734], [-96.92226470339185,32.82798563055431], [-96.92246216268975,32.828102632325134], [-96.92264635970814,32.82823460404209], [-96.92281225401824,32.828382512213935], [-96.92295880519139,32.828539322759674], [-96.92309097382822,32.828702001018776], [-96.9231987236918,32.82889451176149], [-96.9231270578059,32.829556819195616], [-96.92320286263461,32.82985088699452], [-96.92324115735971,32.83037567828074], [-96.92269992821586,32.83134715565532], [-96.92204701031521,32.831412281223315], [-96.92175545672073,32.831486016562685], [-96.92171723372267,32.83156132277094], [-96.921734306369,32.8316111604673], [-96.92164664653893,32.831668489803576], [-96.92654831839772,32.83265027046581], [-96.92685511412473,32.832821461731555], [-96.92747508633266,32.83298002241657], [-96.93026212683729,32.832372910939625], [-96.92926537384223,32.832561085283594], [-96.92859171846636,32.832760503071036], [-96.92777413074916,32.8329291215357], [-96.92643558565632,32.833062897544984], [-96.9262070704706,32.83326078761194], [-96.9214635664453,32.83355674791104], [-96.92179503322653,32.83378373429359], [-96.92204845102395,32.83395270229553], [-96.9224428137804,32.834186607151885], [-96.92272809550946,32.834423403814895], [-96.92288827790686,32.83466104696408], [-96.92494226054892,32.83418049103243], [-96.92485328363847,32.83519469016152], [-96.92485407643413,32.835497598333895], [-96.92480870102905,32.83574916926978], [-96.924750148633,32.83598835649724], [-96.92465640380966,32.83618911335752], [-96.9245614550236,32.836350393017625], [-96.92449329255402,32.83647814848498], [-96.92439990743493,32.83657633262192], [-96.92429828977873,32.83663289816016], [-96.92403241904935,32.8365387977167], [-96.92393731871982,32.836543983800375], [-96.92392597882306,32.8366104088374], [-96.92394738757146,32.83667702518138], [-96.92399854388823,32.83676378512602], [-96.92406844480033,32.83686664092139], [-96.92418009097368,32.8370035447878], [-96.92518146526312,32.837036448933326], [-96.92660860730805,32.83729030555763], [-96.9268684835029,32.83747406688541], [-96.92709910606105,32.837668685163564], [-96.92752148718918,32.83794711268255], [-96.92582495878467,32.84104130174475], [-96.92577181513958,32.841024204874486], [-96.92570941035606,32.84078977453039], [-96.92557675694081,32.8403789633218], [-96.92548692274416,32.84029072396609], [-96.92541287907574,32.840206009324746], [-96.92530063370805,32.84010277239873], [-96.92515475186458,32.84469596626942], [-96.92515515797636,32.84474454442302], [-96.92520837913979,32.84460346030672], [-96.92526044659822,32.844416667639564], [-96.9252473860237,32.8442741203571], [-96.92524221144032,32.84415777262633], [-96.92523092269903,32.84391657885995], [-96.9252305205617,32.84339549372804], [-96.92518307575808,32.843048472162685], [-96.92512558963631,32.84271246939058], [-96.92510010191579,32.842557440932126], [-96.92510061543786,32.842415342624996], [-96.92518115035102,32.84226313063034], [-96.92527573851879,32.84217676144705], [-96.9254413900787,32.84202419192918], [-96.92565814381042,32.84192937929272], [-96.92571903404283,32.84197028113294], [-96.92585506965106,32.841975855439806], [-96.92612027958023,32.84195406060516], [-96.92638469759416,32.84195185543719], [-96.92700035587634,32.84199419917395], [-96.9277182854338,32.84208705149566], [-96.92815651411965,32.842196372537174], [-96.92850407135272,32.84229412289962], [-96.92871998933195,32.8423712636622], [-96.92303556750609,32.845222756364045], [-96.92265144507935,32.84674456312207], [-96.9222967307011,32.84767464651239], [-96.92189950489245,32.8484749696396], [-96.92172276419579,32.848689496153796], [-96.9237410893001,32.843108190296135], [-96.923802546131,32.84328701670827], [-96.92374965829725,32.84347294076576], [-96.92365146269331,32.84363092836846], [-96.92353000280231,32.84379494600556], [-96.92338332178431,32.843988960766374], [-96.9232224556523,32.84413994035114], [-96.92288446231686,32.844442853078014], [-96.92244837426912,32.84476566789729], [-96.9221762216269,32.84492435439849], [-96.92185905928893,32.84505088281731], [-96.92158293218587,32.84514022404785], [-96.92127788623063,32.8451923496505], [-96.92104596927354,32.84522723186053], [-96.92084223019,32.84527384359657], [-96.92059571034834,32.845238158469684], [-96.92039946444064,32.845221150789605], [-96.92018153243329,32.84508279557484], [-96.92293075844712,32.841306068572806], [-96.92278981214419,32.84449094619561], [-96.91725748845279,32.85068440564823], [-96.91617826911246,32.849453424889965], [-96.91492269293349,32.84954698255384], [-96.91507279822012,32.85085305805673], [-96.91489851558393,32.85094963157779], [-96.91559254022776,32.84177868407015], [-96.91541578881139,32.84207719718833], [-96.91521892350433,32.84371915343081], [-96.915037919567,32.844920536056705], [-96.92370969579731,32.84199332911104], [-96.92352559723263,32.842491517408526], [-96.9133495208793,32.842304086578224], [-96.91435055467473,32.84236802303858], [-96.91736376818268,32.843241314011124], [-96.91691918097386,32.843797947525246], [-96.91655185513237,32.84423091241846], [-96.9160578566366,32.84496119834133], [-96.915831220013,32.84506379576156], [-96.91558001680603,32.84515969596507], [-96.91525830338436,32.84526189106002], [-96.91497913504723,32.84530737397885], [-96.9143215696874,32.84538613848035], [-96.91133267086113,32.84618717915156], [-96.91144147769788,32.84617049140981], [-96.91158505725987,32.84616007150336], [-96.91172846628058,32.84615291651313], [-96.91213476159363,32.846157024353445], [-96.912391,32.846212393772646], [-96.91246923814965,32.84627902435345], [-96.91269853223814,32.84650491651311], [-96.91562893644198,32.84715807150331], [-96.91737052114979,32.846307491409796], [-96.91723228122223,32.85074617915096], [-96.91621037304874,32.84992913847948], [-96.91571580146686,32.84962737397773], [-96.91532162565989,32.84948989105859], [-96.91498690323061,32.84939869596325], [-96.91450969112037,32.84930779575933], [-96.91412204438033,32.84926319833858], [-96.9130380189888,32.84925191241467], [-96.9117296694325,32.84931294752038], [-96.91172705571321,32.84927831400496], [-96.91138023411315,32.849136023030674], [-96.91110422918695,32.84982408656827], [-96.91084713208613,32.85016951739707], [-96.91053498353315,32.85059932909671], [-96.91020684510828,32.85091453604562], [-96.90990877117399,32.851122153415716], [-96.91108382270849,32.851067197168184], [-96.91091104294217,32.851006684047555], [-96.91091850811969,32.85044663157913], [-96.91089125672023,32.849733058059954], [-96.91079932847259,32.84912698255514], [-96.91068477339167,32.84864942489267], [-96.91052563309422,32.848464405656216], [-96.91045036387959,32.84138094620757], [-96.91019122863675,32.84152706857188], [-96.90996368005699,32.84155779559022], [-96.90974976319653,32.84155515080656], [-96.90941051524206,32.841707158486976], [-96.90894698098484,32.84205784361321], [-96.907088047852,32.8449732318619], [-96.90705712898402,32.84497234965177], [-96.90738505824653,32.845275224047036], [-96.90725393055233,32.845190882816425], [-96.9073717486061,32.84532535439584], [-96.9073195827836,32.84533166789337], [-96.9072824639789,32.84539385307117], [-96.90723443684868,32.84549894034094], [-96.90713155058394,32.845570960754024], [-96.90702084565025,32.84563794599061], [-96.9067482915646,32.84656492834377], [-96.90658305728276,32.846808940736665], [-96.90970849593003,32.84280201671265], [-96.90805395125876,32.84264819030043], [-96.90782578893622,32.84251649621324], [-96.90765104983556,32.84237896970015], [-96.9074927715701,32.84223664656806], [-96.90732799202755,32.8420795631712], [-96.90717674658111,32.84191675639983], [-96.90704206968707,32.841758263669036], [-96.90691499740588,32.84158912290766], [-96.90679856537491,32.841391372546596], [-96.90669280511362,32.84118105150652], [-96.9066938088171,32.84036519919393], [-96.90667954376929,32.839590855466795], [-96.90660899268885,32.8393190606389], [-96.90656823570458,32.83905085547807], [-96.90669333896665,32.83843228118013], [-96.90683531022513,32.83766337935074], [-96.9058493401867,32.844535191894416], [-96.90579009265893,32.8437347614251], [-96.90571275338844,32.84314413061773], [-96.90568335053055,32.8427243426205], [-96.90568992027883,32.842357440935075], [-96.90571448391348,32.84205446940046], [-96.90577507033055,32.841750472182405], [-96.90588970181871,32.84143249375827], [-96.9060713976098,32.84110657890377], [-96.9092442725138,32.83993677269292], [-96.90932412469623,32.83984412042776], [-96.90941109238027,32.839765667714516], [-96.9094761887729,32.83972646038609], [-96.90949143753903,32.83965354450661], [-96.90974575512429,32.840379966340876], [-96.90982829424875,32.84071377238854], [-96.90982905264774,32.840783009315054], [-96.90978899510544,32.84098272395438], [-96.90965415102391,32.84115196330865], [-96.90947552912078,32.84129677452172], [-96.90927714334165,32.84137120486853], [-96.90917001088351,32.84129430174039], [-96.90876609180498,32.84145311262188], [-96.90733733141684,32.842346685082404], [-96.90684390666794,32.842540066797305], [-96.90667976396955,32.842509305466734], [-96.90602783642514,32.84283044883231], [-96.90628022555859,32.84267354468892], [-96.90637988293022,32.842444640824155], [-96.90679282812864,32.84197678503523], [-96.90742804933328,32.84135502510003], [-96.90930963449229,32.83982640878158], [-96.90957633247281,32.839448983750096], [-96.9097872829576,32.83902479767383], [-96.90989146055401,32.8387198981243], [-96.90999388620243,32.838305332592356], [-96.91004354245486,32.837864148461406], [-96.910066394355,32.83761939299616], [-96.91007046155549,32.83732711333838], [-96.90994976743183,32.836700356485366], [-96.90993922639947,32.83636716925954], [-96.90995885480692,32.83608559832424], [-96.90996464686559,32.835791690151794], [-96.9099965907091,32.83546449101174], [-96.91004166908014,32.83512104695675], [-96.91011885853123,32.83482440380857], [-96.91020213813562,32.8346086071453], [-96.91034250605826,32.834331702289695], [-96.91052593504799,32.8340657342893], [-96.91068039981232,32.83385874790652], [-96.91087788560367,32.833656787606095], [-96.90463542953506,32.83292489754698], [-96.90449088650593,32.83277112153798], [-96.90358630936747,32.832503503074655], [-96.90479021695444,32.836372085230835], [-96.90470246266294,32.836230910887174], [-96.91202899207732,32.8322360224265], [-96.91154896132277,32.832098461741005], [-96.90859475679389,32.83192227047514], [-96.90833234079028,32.83179248980202], [-96.90687768221198,32.83172416046592], [-96.90658876308078,32.83159332277057], [-96.90636454683248,32.8314500165631], [-96.90946092710229,32.83205428121598], [-96.90977902424702,32.83184115564982], [-96.91015472158402,32.83165067826693], [-96.91052898267965,32.83150288697713], [-96.9112247739368,32.83137981917697], [-96.91265206016878,32.83127151173789], [-96.91343580663083,32.83115400099516], [-96.90537803849678,32.83031332274312], [-96.90544558911877,32.830192512197605], [-96.9054334830306,32.83008060402599], [-96.90534168189792,32.82995963230952], [-96.90527614279655,32.82985763053913], [-96.90439482744505,32.82973863160623], [-96.90338069160265,32.829630667791726], [-96.90837537183168,32.8336767707269], [-96.90864247408625,32.83358197150447], [-96.90922862786049,32.83347730048607], [-96.90975778683836,32.83338678741599], [-96.91018890496237,32.8333244613814], [-96.91048593761094,32.833276350803445], [-96.91077383813835,32.833248483428406], [-96.91108555891405,32.83325388631932], [-96.911656037352,32.83353258584669], [-96.91194125915716,32.833565607685266], [-96.91260613703052,32.83397497679704], [-96.91287366825213,32.834003717435394], [-96.90947673989616,32.83473585312356], [-96.90968939607089,32.83452340666632], [-96.91001755333924,32.83389040012315], [-96.91028013353335,32.833324854811124], [-96.91050608380526,32.83286479129949], [-96.9107013550491,32.83246622940191], [-96.91089890631574,32.831888188170744], [-96.91108067612201,32.83131268588944], [-96.9112256158205,32.83063574006906], [-96.91134268123285,32.82960936744224], [-96.91152479752448,32.828746583956615], [-96.91185890321435,32.8282884047721], [-96.9121429460756,32.82824684425598], [-96.91175689101942,32.828078915978715], [-96.91156667517497,32.82803463270799], [-96.90799324737107,32.82799800640653], [-96.91916255109282,32.82801904822771], [-96.91678353408332,32.82797076851257], [-96.91450013877314,32.82792017678632], [-96.91332930884246,32.82788728175566], [-96.91334197954882,32.82839409130595], [-96.91356812298534,32.82773961249966], [-96.91391466280625,32.8269308515725], [-96.91420753589344,32.82650381393293], [-96.91447968982843,32.826243504160246], [-96.91529307795598,32.82472192600309], [-96.91557662496521,32.82445808237808], [-96.91490527680895,32.827899975369235], [-96.916398,32.82790060622736], [-96.91973372334664,32.82797397536924], [-96.92169538978655,32.827967082377995], [-96.92194694254594,32.82797392600294], [-96.91114632526377,32.828039504160074], [-96.91160348003399,32.82802081393272], [-96.91221835065487,32.82799985157229], [-96.91284688086124,32.82800161249959], [-96.9141260137614,32.827995091306086], [-96.91517469340016,32.82800628175562], [-96.9163858634443,32.82802617678628], [-96.91781138884838,32.824617768514706], [-96.9178953707659,32.82489904823005], [-96.91775069192849,32.82575800640849], [-96.91739830014022,32.82718763270885], [-96.91752308915032,32.827442915979454], [-96.91760604628693,32.828016844256275], [-96.91774511911719,32.828922404771156], [-96.91790124953417,32.83001058395451], [-96.91808638066573,32.831187367439334], [-96.91824645048688,32.832244740065775], [-96.91834638886598,32.83281768588608], [-96.91842915877514,32.83333018816722], [-96.9184647134105,32.83392022939806], [-96.9184489944202,32.83446079129487], [-96.91883781971727,32.83240685481398], [-96.91994337233696,32.83248340012786], [-96.9217193101751,32.82915340668563], [-96.92239995502872,32.82934285314428], [-96.92031602448525,32.82874371745695], [-96.91975955095923,32.82879597681961], [-96.92077369032383,32.83275160768903], [-96.91999391775727,32.83282958585012], [-96.92035518423528,32.829339886339575], [-96.92096990474985,32.82943248344921], [-96.92113979465543,32.82940235082567], [-96.9208148234328,32.829489461404506]]


for i in 0..<points.count {
    let bearing = Double((i % 360) - 180)
    let expected = destination_expected[i]
    let actual = ruler.destination(points[i], dist: 1.0, bearing: bearing)
    assertErr(expected[0], actual: actual.0, maxErr: 1e-6, description: "destination longitude", i: i)
    assertErr(expected[1], actual: actual.1, maxErr: 1e-6, description: "destination latitude", i: i)
}

// lineDistance
let lineDistance_expected = [0.04662454909427901,0.0068391514197623125,0.0998521677558911,0.1114897011108262,0.07753561751121402,0.173873577625755,0.1468136615674684,0.06837599656020085,0.4307338218326162,0.15584656488988174,0.06961927450155198,0.41767784922452517,0.11346010319030365,0.4069191477510672,0.0912702817480534,0.21057858475480964,0.9731217926415133,0.3421517057131934,0.24832380027187234,0.345931459929503,0.269566962191182,0.003792191683109981,0.3311455084613169,0.050167788929281254,0.1104041562314812,0.2820059822767088,0.2592491201412077,0.20301909742424815,0.3324775424083908,0.01672963983799919,0.2542614100810735,0.2514112112841453,0.13668774071427742,0.3699064116077255,0.5100540014631532,0.27709292806311164,0.7806905867697003,0.7768297872678829,0.11390017527821808,0.0162624337771659,0.585110693926173,0.30913282118994834,0.26207433401586333,0.32168722472380185,0.6017929391701553,0.00981868540593552,0.3856097243248631,0.5966547247562556,0.44360635693488976,0.5884269163801417,0.3863202991166816,1.0477201274090444,0.08757156343986093,0.04985868432498091,0.06725351272770712,0.08775397845174246,0.04290208100438889,0.044581400276212345]

for i in 0..<lines.count {
    var expected = lineDistance_expected[i]
    var actual = ruler.lineDistance(lines[i])
    assertErr(expected, actual: actual, maxErr: 0.003, description: "lineDistance", i: i)
}

//// area
//let area_expected = [0.000013852913223979433,0.00038253063336208116,0.000460166528311167,0.00002550348919134064,0.0005952256854697357,0.00002745627343238426,0.010106783304619237,0.0011042809815581687,0.00007467453867359317,0.00026115590596397485,0.0004233598600010551,0.010634164210451474,0.00019504219924163971,0.00045308678865499196,0.11642042926177855,0.0023790522112640705,0.00851576937439379,0.0074852712873318935,0.00009914311951316069,0.006085169974377685,0.0041234387481356785,0.010246920655083255,0.0017456776108999848,0.0012524502917480424,0.0002985554529450139,0.013319422885064946,0.0330106270073046,0.005952119850619977,0.07276896988603139,0.044671110786691365,0.00008921566204628756,0.0011521493451350524,0.0025982887022256347,0.0001708409863209224,0.009460656477111955,0.008810544363747673,0.00009774280774212044,0.000016747619414367346,0.005292114515297833,0.0005035032941955759,0.0013371547842399789,0.01740451146594105]
//
//for i in 0..<lines.count {
//    if (lines[i].count < 3) {
//        continue
//    }
////    var poly = turf.polygon([lines[i].concat([lines[i][0]])]);
////    var expected = turf.area(poly) / 1e6;
//    var actual = ruler.area([lines[i]])
//    assertErr(area_expected[i], actual: actual, maxErr: 0.003, description: "area", i: i)
//}

// along
let along_dist_expected = [0.023312274547139505,0.0034195757098811562,0.04992608387794555,0.0557448505554131,0.03876780875560701,0.0869367888128775,0.0734068307837342,0.034187998280100426,0.2153669109163081,0.07792328244494087,0.03480963725077599,0.20883892461226258,0.05673005159515183,0.2034595738755336,0.0456351408740267,0.10528929237740482,0.48656089632075666,0.1710758528565967,0.12416190013593617,0.1729657299647515,0.134783481095591,0.0018960958415549904,0.16557275423065845,0.025083894464640627,0.0552020781157406,0.1410029911383544,0.12962456007060386,0.10150954871212407,0.1662387712041954,0.008364819918999594,0.12713070504053675,0.12570560564207264,0.06834387035713871,0.18495320580386276,0.2550270007315766,0.13854646403155582,0.39034529338485013,0.38841489363394144,0.05695008763910904,0.00813121688858295,0.2925553469630865,0.15456641059497417,0.13103716700793167,0.16084361236190092,0.30089646958507765,0.00490934270296776,0.19280486216243156,0.2983273623781278,0.22180317846744488,0.29421345819007083,0.1931601495583408,0.5238600637045222,0.043785781719930465,0.024929342162490455,0.03362675636385356,0.04387698922587123,0.021451040502194443,0.022290700138106172]

let along_expected = [[-96.92058074705261,32.838295790638604],[-96.92038500000223,32.838300500005154],[-96.92017837949813,32.837840876146984],[-96.91575185809616,32.834193910150304],[-96.91550349979606,32.83693300067325],[-96.91447049297071,32.838291837950294],[-96.91528382138036,32.83401702016945],[-96.91074827033752,32.837025468206356],[-96.91465325332314,32.83491180557744],[-96.9133254981959,32.836688157348064],[-96.91774498947464,32.83732349979329],[-96.91858548156746,32.8367137123682],[-96.91212500559202,32.837061935308064],[-96.91369409219624,32.83774164388782],[-96.91639766393257,32.837037707584614],[-96.91504330753082,32.83916332521944],[-96.91553969265064,32.83839013773005],[-96.91430070726514,32.841204555275795],[-96.91571233411688,32.837779806500336],[-96.9177544997986,32.834998000000525],[-96.91166706734955,32.841629875937976],[-96.9107185000003,32.84265700000001],[-96.91156370689535,32.8349314664544],[-96.9204000000076,32.833668500000044],[-96.91099049992684,32.833673001386295],[-96.91421262070213,32.83569407895492],[-96.91178370739729,32.83716800028003],[-96.91715300456607,32.83775950369486],[-96.9169767353908,32.84067978015298],[-96.91422649999899,32.84055400003185],[-96.91397243336206,32.841584696234726],[-96.91523149763673,32.84157652148576],[-96.91515150426643,32.833991344631286],[-96.9142729703425,32.83879948063655],[-96.9156392575161,32.835658314541256],[-96.91543436762962,32.83921014952233],[-96.91983675113876,32.84033226350925],[-96.92009207607055,32.840359219198234],[-96.91380542577559,32.83652206253011],[-96.914236999999,32.84045300003009],[-96.91825697483058,32.836559607150164],[-96.91973317221229,32.83716163055562],[-96.91180206194201,32.83642316543709],[-96.91691026889121,32.84079238934942],[-96.9149104537422,32.840000370933915],[-96.9150394999991,32.83688750001096],[-96.91246302385605,32.83675801387829],[-96.91819499264128,32.8367903863771],[-96.91518494007596,32.83533040554249],[-96.91823942303635,32.836933112622866],[-96.91246139013953,32.83690233470654],[-96.91460659817584,32.8380121984508],[-96.91478449997625,32.840559500872736],[-96.91711949983032,32.83722250026362],[-96.91476949994939,32.83659450051384],[-96.91479349998943,32.84045600087646],[-96.91475749999225,32.836883000209426],[-96.91476449999463,32.83676500022616]]

for i in 0..<lines.count {
    let expected = along_expected[i]
    let dist = along_dist_expected[i]
    let actual = ruler.along(lines[i], dist: dist)
    assertErr(expected[0], actual: actual.0, maxErr: 1e-6, description: "along longitude" , i: i)
    assertErr(expected[1], actual: actual.1, maxErr: 1e-6, description: "along latitude", i: i)
}

// along with dist <= 0
if ruler.along(lines[0], dist: -5) != lines[0][0] {
    print("FAIL: first point")
}

// along with dist > length
if ruler.along(lines[0], dist: 1000) != lines[0][lines[0].count - 1] {
    print("FAIL: last point")
}

// pointOnLine
let line = [(-77.031669, 38.878605), (-77.029609, 38.881946)]
let p = ruler.pointOnLine(line, p:(-77.034076, 38.882017)).point
if p != (-77.03052697027461, 38.880457194811896) {
    print("FAIL: pointOnLine")
}

//test('lineSlice', function (t) {
//    for (var i = 0; i < lines.length; i++) {
//        if (i === 46) continue; // skip due to Turf bug https://github.com/Turfjs/turf/issues/351
//        
//        var line = lines[i];
//        var dist = ruler.lineDistance(line);
//        var start = ruler.along(line, dist * 0.3);
//        var stop = ruler.along(line, dist * 0.7);
//        
//        var expected = ruler.lineDistance(turf.lineSlice(
//            turf.point(start), turf.point(stop), turf.linestring(line)).geometry.coordinates);
//        
//        var actual = ruler.lineDistance(ruler.lineSlice(start, stop, line));
//        
//        assertErr(expected, actual, 0, 'lineSlice length');
//    }
//    t.pass('lineSlice length the same');
//    t.end();
//    });
//
//test('lineSliceAlong', function (t) {
//    for (var i = 0; i < lines.length; i++) {
//        if (i === 46) continue; // skip due to Turf bug https://github.com/Turfjs/turf/issues/351
//        
//        var line = lines[i];
//        var dist = ruler.lineDistance(line);
//        var start = ruler.along(line, dist * 0.3);
//        var stop = ruler.along(line, dist * 0.7);
//        
//        var expected = ruler.lineDistance(turf.lineSlice(
//            turf.point(start), turf.point(stop), turf.linestring(line)).geometry.coordinates);
//        var actual = ruler.lineDistance(ruler.lineSliceAlong(dist * 0.3, dist * 0.7, line));
//        
//        assertErr(expected, actual, 1e-10, 'lineSliceAlong length');
//    }
//    t.pass('lineSliceAlong length within 1e-10');
//    t.end();
//    });
//
// lineSlice reverse
func lineSliceTest() {
    let line = lines[0];
    let dist = ruler.lineDistance(line);
    let start = ruler.along(line, dist: dist * 0.7);
    let stop = ruler.along(line, dist: dist * 0.3);
    let actual = ruler.lineDistance(ruler.lineSlice(start, stop: stop, line: line));
    if actual != 0.018676802802910702 {
        print("lineSlice reversed length")
    }
}
// TODO: this test crashes hard
//lineSliceTest()

//test('bufferPoint', function (t) {
//    for (var i = 0; i < points.length; i++) {
//        var expected = turfPointBuffer(points[i], 0.1);
//        var actual = milesRuler.bufferPoint(points[i], 0.1);
//        assertErr(expected[0], actual[0], 2e-7, 'bufferPoint west');
//        assertErr(expected[1], actual[1], 2e-7, 'bufferPoint east');
//        assertErr(expected[2], actual[2], 2e-7, 'bufferPoint south');
//        assertErr(expected[3], actual[3], 2e-7, 'bufferPoint north');
//    }
//    t.pass('point buffer error within 2e-7');
//    t.end();
//    });
//
//test('bufferBBox', function (t) {
//    var bbox = [30, 38, 40, 39];
//    var bbox2 = ruler.bufferBBox(bbox, 1);
//    t.same(bbox2, [29.989319515875376, 37.99098271225711, 40.01068048412462, 39.00901728774289], 'bufferBBox');
//    t.end();
//    });
//
//test('insideBBox', function (t) {
//    var bbox = [30, 38, 40, 39];
//    t.ok(ruler.insideBBox([35, 38.5], bbox), 'insideBBox inside');
//    t.notOk(ruler.insideBBox([45, 45], bbox), 'insideBBox outside');
//    t.end();
//    });
//
//test('cheapRuler.fromTile', function (t) {
//    var ruler1 = createRuler(50.5);
//    var ruler2 = createRuler.fromTile(11041, 15);
//    
//    var p1 = [30.5, 50.5];
//    var p2 = [30.51, 50.51];
//    
//    assertErr(ruler1.distance(p1, p2), ruler2.distance(p1, p2), 2e-5, 'cheapRuler.fromTile distance');
//    
//    t.end();
//    });




// benchmark

var distances = lines.map({
    (line: [Point]) -> (Double) in
    return ruler.lineDistance(line)
})

let (opsPerSecond, samples) = timeIt({
    for i in 0..<lines.count {
        ruler.along(lines[i], dist: distances[i])
    }
})
print("\(opsPerSecond) ops/second, \(samples) samples")
